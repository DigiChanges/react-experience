{"version":3,"sources":["../../build/compiler.ts"],"names":["generateStats","result","stat","errors","warnings","toJson","length","push","runCompiler","config","Promise","resolve","reject","compiler","run","err","statsOrMultiStats","stats","reduce"],"mappings":"qEAAA,wD,mFAOA,QAASA,CAAAA,aAAT,CAAuBC,MAAvB,CAA+CC,IAA/C,CAA4E,CAC1E,KAAM,CAAEC,MAAF,CAAUC,QAAV,EAAuBF,IAAI,CAACG,MAAL,CAAY,iBAAZ,CAA7B,CACA,GAAIF,MAAM,CAACG,MAAP,CAAgB,CAApB,CAAuB,CACrBL,MAAM,CAACE,MAAP,CAAcI,IAAd,CAAmB,GAAGJ,MAAtB,EACD,CAED,GAAIC,QAAQ,CAACE,MAAT,CAAkB,CAAtB,CAAyB,CACvBL,MAAM,CAACG,QAAP,CAAgBG,IAAhB,CAAqB,GAAGH,QAAxB,EACD,CAED,MAAOH,CAAAA,MAAP,CACD,CAEM,QAASO,CAAAA,WAAT,CACLC,MADK,CAEoB,CACzB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,MAAOC,OAAP,CAAgBC,MAAhB,GAA2B,CAC5C,KAAMC,CAAAA,QAAQ,CAAG,qBAAQJ,MAAR,CAAjB,CACAI,QAAQ,CAACC,GAAT,CACE,CAACC,GAAD,CAAaC,iBAAb,GAA+D,CAC7D,GAAID,GAAJ,CAAS,CACP,MAAOH,CAAAA,MAAM,CAACG,GAAD,CAAb,CACD,CAED,GAAI,SAAWC,CAAAA,iBAAf,CAAkC,CAChC,KAAMf,CAAAA,MAAsB,CAAGe,iBAAiB,CAACC,KAAlB,CAAwBC,MAAxB,CAC7BlB,aAD6B,CAE7B,CAAEG,MAAM,CAAE,EAAV,CAAcC,QAAQ,CAAE,EAAxB,CAF6B,CAA/B,CAIA,MAAOO,CAAAA,OAAO,CAACV,MAAD,CAAd,CACD,CAED,KAAMA,CAAAA,MAAM,CAAGD,aAAa,CAC1B,CAAEG,MAAM,CAAE,EAAV,CAAcC,QAAQ,CAAE,EAAxB,CAD0B,CAE1BY,iBAF0B,CAA5B,CAIA,MAAOL,CAAAA,OAAO,CAACV,MAAD,CAAd,CACD,CAnBH,EAqBD,CAvBM,CAAP,CAwBD","sourcesContent":["import webpack, { Stats, Configuration } from 'webpack'\n\nexport type CompilerResult = {\n  errors: string[]\n  warnings: string[]\n}\n\nfunction generateStats(result: CompilerResult, stat: Stats): CompilerResult {\n  const { errors, warnings } = stat.toJson('errors-warnings')\n  if (errors.length > 0) {\n    result.errors.push(...errors)\n  }\n\n  if (warnings.length > 0) {\n    result.warnings.push(...warnings)\n  }\n\n  return result\n}\n\nexport function runCompiler(\n  config: Configuration | Configuration[]\n): Promise<CompilerResult> {\n  return new Promise(async (resolve, reject) => {\n    const compiler = webpack(config)\n    compiler.run(\n      (err: Error, statsOrMultiStats: { stats: Stats[] } | Stats) => {\n        if (err) {\n          return reject(err)\n        }\n\n        if ('stats' in statsOrMultiStats) {\n          const result: CompilerResult = statsOrMultiStats.stats.reduce(\n            generateStats,\n            { errors: [], warnings: [] }\n          )\n          return resolve(result)\n        }\n\n        const result = generateStats(\n          { errors: [], warnings: [] },\n          statsOrMultiStats\n        )\n        return resolve(result)\n      }\n    )\n  })\n}\n"]}