{"version":3,"sources":["../../../../build/webpack/plugins/unlink-removed-pages-plugin.ts"],"names":["UnlinkRemovedPagesPlugin","constructor","prevAssets","apply","compiler","hooks","afterEmit","tapAsync","compilation","callback","removed","Object","keys","filter","a","IS_BUNDLED_PAGE_REGEX","test","assets","Promise","all","map","f","path","outputPath","promises","unlink","err","code","then"],"mappings":"6EAAA,0BACA,sBACA,6DAGA;AACO,KAAMA,CAAAA,wBAAyB,CAEpCC,WAAW,EAAG,MADdC,UACc,QACZ,KAAKA,UAAL,CAAkB,EAAlB,CACD,CAEDC,KAAK,CAACC,QAAD,CAAqB,CACxBA,QAAQ,CAACC,KAAT,CAAeC,SAAf,CAAyBC,QAAzB,CACE,0BADF,CAEE,CAACC,WAAD,CAAcC,QAAd,GAA2B,CACzB,KAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACC,IAAP,CAAY,KAAKV,UAAjB,EAA6BW,MAA7B,CACbC,CAAD,EAAOC,iCAAsBC,IAAtB,CAA2BF,CAA3B,GAAiC,CAACN,WAAW,CAACS,MAAZ,CAAmBH,CAAnB,CAD3B,CAAhB,CAIA,KAAKZ,UAAL,CAAkBM,WAAW,CAACS,MAA9B,CAEAC,OAAO,CAACC,GAAR,CACET,OAAO,CAACU,GAAR,CAAY,KAAOC,CAAAA,CAAP,EAAa,CACvB,KAAMC,CAAAA,IAAI,CAAG,eAAMlB,QAAD,CAAkBmB,UAAvB,CAAmCF,CAAnC,CAAb,CACA,GAAI,CACF,KAAMG,cAASC,MAAT,CAAgBH,IAAhB,CAAN,CACD,CAAC,MAAOI,GAAP,CAAY,CACZ,GAAIA,GAAG,CAACC,IAAJ,GAAa,QAAjB,CAA2B,OAC3B,KAAMD,CAAAA,GAAN,CACD,CACF,CARD,CADF,EAUEE,IAVF,CAUO,IAAMnB,QAAQ,EAVrB,CAUyBA,QAVzB,EAWD,CApBH,EAsBD,CA7BmC,C","sourcesContent":["import { join } from 'path'\nimport { promises } from 'fs'\nimport { IS_BUNDLED_PAGE_REGEX } from '../../../next-server/lib/constants'\nimport { Compiler } from 'webpack'\n\n// Makes sure removed pages are removed from `.next` in development\nexport class UnlinkRemovedPagesPlugin {\n  prevAssets: any\n  constructor() {\n    this.prevAssets = {}\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.afterEmit.tapAsync(\n      'NextJsUnlinkRemovedPages',\n      (compilation, callback) => {\n        const removed = Object.keys(this.prevAssets).filter(\n          (a) => IS_BUNDLED_PAGE_REGEX.test(a) && !compilation.assets[a]\n        )\n\n        this.prevAssets = compilation.assets\n\n        Promise.all(\n          removed.map(async (f) => {\n            const path = join((compiler as any).outputPath, f)\n            try {\n              await promises.unlink(path)\n            } catch (err) {\n              if (err.code === 'ENOENT') return\n              throw err\n            }\n          })\n        ).then(() => callback(), callback)\n      }\n    )\n  }\n}\n"]}