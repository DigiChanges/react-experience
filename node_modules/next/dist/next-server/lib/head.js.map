{"version":3,"sources":["../../../next-server/lib/head.tsx"],"names":["defaultHead","inAmpMode","head","push","onlyReactElement","list","child","type","React","Fragment","concat","Children","toArray","props","children","reduce","fragmentList","fragmentChild","METATYPES","unique","keys","Set","tags","metaTypes","metaCategories","h","key","indexOf","slice","has","add","i","len","length","metatype","hasOwnProperty","category","categories","reduceComponents","headElements","headElement","headElementChildren","reverse","filter","map","c","cloneElement","Effect","Head","ampState","updateHead","rewind"],"mappings":"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","sourcesContent":["import React from 'react'\nimport withSideEffect from './side-effect'\nimport { AmpStateContext } from './amp-context'\nimport { HeadManagerContext } from './head-manager-context'\nimport { isInAmpMode } from './amp'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" />]\n  if (!inAmpMode) {\n    head.push(<meta name=\"viewport\" content=\"width=device-width\" />)\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactChild\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      React.Children.toArray(child.props.children).reduce(\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactChild\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let unique = true\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        unique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          unique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              unique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if (categories.has(category)) {\n              unique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return unique\n  }\n}\n\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\nfunction reduceComponents(\n  headElements: Array<React.ReactElement<any>>,\n  props: WithInAmpMode\n) {\n  return headElements\n    .reduce(\n      (list: React.ReactChild[], headElement: React.ReactElement<any>) => {\n        const headElementChildren = React.Children.toArray(\n          headElement.props.children\n        )\n        return list.concat(headElementChildren)\n      },\n      []\n    )\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(props.inAmpMode))\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      return React.cloneElement(c, { key })\n    })\n}\n\nconst Effect = withSideEffect()\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  return (\n    <AmpStateContext.Consumer>\n      {(ampState) => (\n        <HeadManagerContext.Consumer>\n          {(updateHead) => (\n            <Effect\n              reduceComponentsToState={reduceComponents}\n              handleStateChange={updateHead}\n              inAmpMode={isInAmpMode(ampState)}\n            >\n              {children}\n            </Effect>\n          )}\n        </HeadManagerContext.Consumer>\n      )}\n    </AmpStateContext.Consumer>\n  )\n}\n\nHead.rewind = Effect.rewind\n\nexport default Head\n"]}