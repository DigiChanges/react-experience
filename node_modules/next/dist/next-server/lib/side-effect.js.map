{"version":3,"sources":["../../../next-server/lib/side-effect.tsx"],"names":["isServer","window","mountedInstances","Set","state","emitChange","component","props","reduceComponentsToState","handleStateChange","Component","rewind","recordedState","undefined","clear","constructor","add","componentDidMount","componentDidUpdate","componentWillUnmount","delete","render"],"mappings":"4DAAA,4BAEA,KAAMA,CAAAA,QAAQ,CAAG,MAAOC,CAAAA,MAAP,GAAkB,WAAnC,C,aAae,IAAM,CACnB,KAAMC,CAAAA,gBAA0B,CAAG,GAAIC,CAAAA,GAAJ,EAAnC,CACA,GAAIC,CAAAA,KAAJ,CAEA,QAASC,CAAAA,UAAT,CAAoBC,SAApB,CAAuE,CACrEF,KAAK,CAAGE,SAAS,CAACC,KAAV,CAAgBC,uBAAhB,CACN,CAAC,GAAGN,gBAAJ,CADM,CAENI,SAAS,CAACC,KAFJ,CAAR,CAIA,GAAID,SAAS,CAACC,KAAV,CAAgBE,iBAApB,CAAuC,CACrCH,SAAS,CAACC,KAAV,CAAgBE,iBAAhB,CAAkCL,KAAlC,EACD,CACF,CAED,MAAO,cAAcM,iBAA2B,CAC9C;AACA,MAAOC,CAAAA,MAAP,EAAgB,CACd,KAAMC,CAAAA,aAAa,CAAGR,KAAtB,CACAA,KAAK,CAAGS,SAAR,CACAX,gBAAgB,CAACY,KAAjB,GACA,MAAOF,CAAAA,aAAP,CACD,CAEDG,WAAW,CAACR,KAAD,CAAa,CACtB,MAAMA,KAAN,EACA,GAAIP,QAAJ,CAAc,CACZE,gBAAgB,CAACc,GAAjB,CAAqB,IAArB,EACAX,UAAU,CAAC,IAAD,CAAV,CACD,CACF,CACDY,iBAAiB,EAAG,CAClBf,gBAAgB,CAACc,GAAjB,CAAqB,IAArB,EACAX,UAAU,CAAC,IAAD,CAAV,CACD,CACDa,kBAAkB,EAAG,CACnBb,UAAU,CAAC,IAAD,CAAV,CACD,CACDc,oBAAoB,EAAG,CACrBjB,gBAAgB,CAACkB,MAAjB,CAAwB,IAAxB,EACAf,UAAU,CAAC,IAAD,CAAV,CACD,CAEDgB,MAAM,EAAG,CACP,MAAO,KAAP,CACD,CA9B6C,CAAhD,CAgCD,C","sourcesContent":["import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = Array<React.ReactElement<any>> | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  inAmpMode?: boolean\n}\n\nexport default () => {\n  const mountedInstances: Set<any> = new Set()\n  let state: State\n\n  function emitChange(component: React.Component<SideEffectProps>): void {\n    state = component.props.reduceComponentsToState(\n      [...mountedInstances],\n      component.props\n    )\n    if (component.props.handleStateChange) {\n      component.props.handleStateChange(state)\n    }\n  }\n\n  return class extends Component<SideEffectProps> {\n    // Used when server rendering\n    static rewind() {\n      const recordedState = state\n      state = undefined\n      mountedInstances.clear()\n      return recordedState\n    }\n\n    constructor(props: any) {\n      super(props)\n      if (isServer) {\n        mountedInstances.add(this)\n        emitChange(this)\n      }\n    }\n    componentDidMount() {\n      mountedInstances.add(this)\n      emitChange(this)\n    }\n    componentDidUpdate() {\n      emitChange(this)\n    }\n    componentWillUnmount() {\n      mountedInstances.delete(this)\n      emitChange(this)\n    }\n\n    render() {\n      return null\n    }\n  }\n}\n"]}