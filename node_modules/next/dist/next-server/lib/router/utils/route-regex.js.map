{"version":3,"sources":["../../../../../next-server/lib/router/utils/route-regex.ts"],"names":["escapeRegex","str","replace","getRouteRegex","normalizedRoute","escapedRoute","groups","groupIndex","parameterizedRoute","_","$1","isOptional","test","slice","isCatchAll","pos","repeat","namedParameterizedRoute","window","key","re","RegExp","namedRegex","undefined"],"mappings":"yEAAA;AACA;AACA,QAASA,CAAAA,WAAT,CAAqBC,GAArB,CAAkC,CAChC,MAAOA,CAAAA,GAAG,CAACC,OAAJ,CAAY,sBAAZ,CAAoC,MAApC,CAAP,CACD,CAEM,QAASC,CAAAA,aAAT,CACLC,eADK,CAML,CACA;AACA,KAAMC,CAAAA,YAAY,CAAGL,WAAW,CAACI,eAAe,CAACF,OAAhB,CAAwB,KAAxB,CAA+B,EAA/B,GAAsC,GAAvC,CAAhC,CAEA,KAAMI,CAAAA,MAAiE,CAAG,EAA1E,CACA,GAAIC,CAAAA,UAAU,CAAG,CAAjB,CAEA,KAAMC,CAAAA,kBAAkB,CAAGH,YAAY,CAACH,OAAb,CACzB,6BADyB,CAEzB,CAACO,CAAD,CAAIC,EAAJ,GAAW,CACT,KAAMC,CAAAA,UAAU,CAAG,eAAeC,IAAf,CAAoBF,EAApB,CAAnB,CACA,GAAIC,UAAJ,CAAgB,CACdD,EAAE,CAAGA,EAAE,CAACG,KAAH,CAAS,CAAT,CAAY,CAAC,CAAb,CAAL,CACD,CACD,KAAMC,CAAAA,UAAU,CAAG,aAAaF,IAAb,CAAkBF,EAAlB,CAAnB,CACA,GAAII,UAAJ,CAAgB,CACdJ,EAAE,CAAGA,EAAE,CAACG,KAAH,CAAS,CAAT,CAAL,CACD,CACDP,MAAM,CACJI,EACE;AADA,CAECR,OAFH,CAEW,0BAFX,CAEuC,IAFvC,CAGA;AAJI,CAAN,CAKI,CAAEa,GAAG,CAAER,UAAU,EAAjB,CAAqBS,MAAM,CAAEF,UAA7B,CALJ,CAMA,MAAOA,CAAAA,UAAU,CAAIH,UAAU,CAAG,aAAH,CAAmB,QAAjC,CAA6C,WAA9D,CACD,CAlBwB,CAA3B,CAqBA,GAAIM,CAAAA,uBAAJ,CAEA;AACA;AACA,GAAI,MAAOC,CAAAA,MAAP,GAAkB,WAAtB,CAAmC,CACjCD,uBAAuB,CAAGZ,YAAY,CAACH,OAAb,CACxB,6BADwB,CAExB,CAACO,CAAD,CAAIC,EAAJ,GAAW,CACT,KAAMI,CAAAA,UAAU,CAAG,aAAaF,IAAb,CAAkBF,EAAlB,CAAnB,CACA,KAAMS,CAAAA,GAAG,CAAGT,EACV;AADY,CAEXR,OAFS,CAED,0BAFC,CAE2B,IAF3B,EAGTA,OAHS,CAGD,QAHC,CAGS,EAHT,CAAZ,CAKA,MAAOY,CAAAA,UAAU,CACZ,OAAMd,WAAW,CAACmB,GAAD,CAAM,OADX,CAEZ,OAAMnB,WAAW,CAACmB,GAAD,CAAM,UAF5B,CAGD,CAZuB,CAA1B,CAcD,CAED,MAAO,CACLC,EAAE,CAAE,GAAIC,CAAAA,MAAJ,CAAW,IAAMb,kBAAN,CAA2B,SAAtC,CAAiD,GAAjD,CADC,CAELF,MAFK,CAGLgB,UAAU,CAAEL,uBAAuB,CAC9B,IAAGA,uBAAwB,SADG,CAE/BM,SALC,CAAP,CAOD","sourcesContent":["// this isn't importing the escape-string-regex module\n// to reduce bytes\nfunction escapeRegex(str: string) {\n  return str.replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&')\n}\n\nexport function getRouteRegex(\n  normalizedRoute: string\n): {\n  re: RegExp\n  namedRegex?: string\n  groups: { [groupName: string]: { pos: number; repeat: boolean } }\n} {\n  // Escape all characters that could be considered RegEx\n  const escapedRoute = escapeRegex(normalizedRoute.replace(/\\/$/, '') || '/')\n\n  const groups: { [groupName: string]: { pos: number; repeat: boolean } } = {}\n  let groupIndex = 1\n\n  const parameterizedRoute = escapedRoute.replace(\n    /\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g,\n    (_, $1) => {\n      const isOptional = /^\\\\\\[.*\\\\\\]$/.test($1)\n      if (isOptional) {\n        $1 = $1.slice(2, -2)\n      }\n      const isCatchAll = /^(\\\\\\.){3}/.test($1)\n      if (isCatchAll) {\n        $1 = $1.slice(6)\n      }\n      groups[\n        $1\n          // Un-escape key\n          .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n        // eslint-disable-next-line no-sequences\n      ] = { pos: groupIndex++, repeat: isCatchAll }\n      return isCatchAll ? (isOptional ? '(?:/(.+?))?' : '/(.+?)') : '/([^/]+?)'\n    }\n  )\n\n  let namedParameterizedRoute: string | undefined\n\n  // dead code eliminate for browser since it's only needed\n  // while generating routes-manifest\n  if (typeof window === 'undefined') {\n    namedParameterizedRoute = escapedRoute.replace(\n      /\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g,\n      (_, $1) => {\n        const isCatchAll = /^(\\\\\\.){3}/.test($1)\n        const key = $1\n          // Un-escape key\n          .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n          .replace(/^\\.{3}/, '')\n\n        return isCatchAll\n          ? `/(?<${escapeRegex(key)}>.+?)`\n          : `/(?<${escapeRegex(key)}>[^/]+?)`\n      }\n    )\n  }\n\n  return {\n    re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n    groups,\n    namedRegex: namedParameterizedRoute\n      ? `^${namedParameterizedRoute}(?:/)?$`\n      : undefined,\n  }\n}\n"]}