{"version":3,"sources":["../../cli/next-dev.ts"],"names":["nextDev","argv","args","Boolean","Number","String","console","log","process","exit","dir","_","port","appUrl","dev","isNextDevCommand","then","app","prepare","catch","err","code","errorMessage","pkgAppPath","require","sync","cwd","appPackage","scripts","nextScript","Object","entries","find","scriptLine","error","nextTick"],"mappings":"AAAA;4DACA,0BACA,8EACA,sBACA,+EACA,0CACA,uC,mFAGA,KAAMA,CAAAA,OAAmB,CAAIC,IAAD,EAAU,CACpC,KAAMC,CAAAA,IAAI,CAAG,mBACX,CACE;AACA,SAAUC,OAFZ,CAGE,SAAUC,MAHZ,CAIE,aAAcC,MAJhB,CAME;AACA,KAAM,QAPR,CAQE,KAAM,QARR,CASE,KAAM,YATR,CADW,CAYX,CAAEJ,IAAF,CAZW,CAAb,CAeA,GAAIC,IAAI,CAAC,QAAD,CAAR,CAAoB,CAClB;AACAI,OAAO,CAACC,GAAR,CAAa;;;;;;;;;;;;;;;KAAb,EAgBAC,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CAED,KAAMC,CAAAA,GAAG,CAAG,kBAAQR,IAAI,CAACS,CAAL,CAAO,CAAP,GAAa,GAArB,CAAZ,CAEA;AACA,GAAI,CAAC,mBAAWD,GAAX,CAAL,CAAsB,CACpB,wBAAc,mDAAkDA,GAAI,EAApE,EACD,CAED,KAAME,CAAAA,IAAI,CAAGV,IAAI,CAAC,QAAD,CAAJ,EAAkB,IAA/B,CACA,KAAMW,CAAAA,MAAM,CAAI,UAASX,IAAI,CAAC,YAAD,CAAJ,EAAsB,WAAY,IAAGU,IAAK,EAAnE,CAEA,qCAAyBC,MAAzB,EAEA,yBACE,CAAEH,GAAF,CAAOI,GAAG,CAAE,IAAZ,CAAkBC,gBAAgB,CAAE,IAApC,CADF,CAEEH,IAFF,CAGEV,IAAI,CAAC,YAAD,CAHN,EAKGc,IALH,CAKQ,KAAOC,CAAAA,GAAP,EAAe,CACnB,KAAMA,CAAAA,GAAG,CAACC,OAAJ,EAAN,CACD,CAPH,EAQGC,KARH,CAQUC,GAAD,EAAS,CACd,GAAIA,GAAG,CAACC,IAAJ,GAAa,YAAjB,CAA+B,CAC7B,GAAIC,CAAAA,YAAY,CAAI,QAAOV,IAAK,qBAAhC,CACA,KAAMW,CAAAA,UAAU,CAAGC,OAAO,CAAC,4BAAD,CAAP,CAAsCC,IAAtC,CACjB,cADiB,CAEjB,CACEC,GAAG,CAAEhB,GADP,CAFiB,CAAnB,CAMA,KAAMiB,CAAAA,UAAU,CAAGH,OAAO,CAACD,UAAD,CAA1B,CACA,GAAII,UAAU,CAACC,OAAf,CAAwB,CACtB,KAAMC,CAAAA,UAAU,CAAGC,MAAM,CAACC,OAAP,CAAeJ,UAAU,CAACC,OAA1B,EAAmCI,IAAnC,CAChBC,UAAD,EAAgBA,UAAU,CAAC,CAAD,CAAV,GAAkB,MADjB,CAAnB,CAGA,GAAIJ,UAAJ,CAAgB,CACdP,YAAY,EAAK,mBAAkBO,UAAU,CAAC,CAAD,CAAI,6BAAjD,CACD,CACF,CACD;AACAvB,OAAO,CAAC4B,KAAR,CAAcZ,YAAd,EACD,CAnBD,IAmBO,CACL;AACAhB,OAAO,CAAC4B,KAAR,CAAcd,GAAd,EACD,CACDZ,OAAO,CAAC2B,QAAR,CAAiB,IAAM3B,OAAO,CAACC,IAAR,CAAa,CAAb,CAAvB,EACD,CAjCH,EAkCD,CAnFD,C","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport arg from 'next/dist/compiled/arg/index.js'\nimport { existsSync } from 'fs'\nimport startServer from '../server/lib/start-server'\nimport { printAndExit } from '../server/lib/utils'\nimport { startedDevelopmentServer } from '../build/output'\nimport { cliCommand } from '../bin/next'\n\nconst nextDev: cliCommand = (argv) => {\n  const args = arg(\n    {\n      // Types\n      '--help': Boolean,\n      '--port': Number,\n      '--hostname': String,\n\n      // Aliases\n      '-h': '--help',\n      '-p': '--port',\n      '-H': '--hostname',\n    },\n    { argv }\n  )\n\n  if (args['--help']) {\n    // tslint:disable-next-line\n    console.log(`\n      Description\n        Starts the application in development mode (hot-code reloading, error\n        reporting, etc)\n\n      Usage\n        $ next dev <dir> -p <port number>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p      A port number on which to start the application\n        --hostname, -H  Hostname on which to start the application\n        --help, -h      Displays this message\n    `)\n    process.exit(0)\n  }\n\n  const dir = resolve(args._[0] || '.')\n\n  // Check if pages dir exists and warn if not\n  if (!existsSync(dir)) {\n    printAndExit(`> No such directory exists as the project root: ${dir}`)\n  }\n\n  const port = args['--port'] || 3000\n  const appUrl = `http://${args['--hostname'] || 'localhost'}:${port}`\n\n  startedDevelopmentServer(appUrl)\n\n  startServer(\n    { dir, dev: true, isNextDevCommand: true },\n    port,\n    args['--hostname']\n  )\n    .then(async (app) => {\n      await app.prepare()\n    })\n    .catch((err) => {\n      if (err.code === 'EADDRINUSE') {\n        let errorMessage = `Port ${port} is already in use.`\n        const pkgAppPath = require('next/dist/compiled/find-up').sync(\n          'package.json',\n          {\n            cwd: dir,\n          }\n        )\n        const appPackage = require(pkgAppPath)\n        if (appPackage.scripts) {\n          const nextScript = Object.entries(appPackage.scripts).find(\n            (scriptLine) => scriptLine[1] === 'next'\n          )\n          if (nextScript) {\n            errorMessage += `\\nUse \\`npm run ${nextScript[0]} -- -p <some other port>\\`.`\n          }\n        }\n        // tslint:disable-next-line\n        console.error(errorMessage)\n      } else {\n        // tslint:disable-next-line\n        console.error(err)\n      }\n      process.nextTick(() => process.exit(1))\n    })\n}\n\nexport { nextDev }\n"]}