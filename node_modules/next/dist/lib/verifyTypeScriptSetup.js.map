{"version":3,"sources":["../../lib/verifyTypeScriptSetup.ts"],"names":["hasTypeScript","dir","typescriptFiles","length","checkDependencies","isYarn","requiredPackages","file","pkg","resolutions","Map","missingPackages","filter","p","set","_","get","packagesHuman","map","index","join","packagesCli","console","error","chalk","bold","red","cyan","process","exit","verifyTypeScriptSetup","pagesDir","tsConfigPath","path","yarnLockFile","hasTsConfig","firstTimeSetup","tsConfig","fsPromises","readFile","then","val","trim","hasTypeScriptFiles","tsPath","ts","compilerOptions","target","parsedValue","ScriptTarget","ES5","suggested","lib","allowJs","skipLibCheck","strict","forceConsistentCasingInFileNames","noEmit","esModuleInterop","value","reason","module","ModuleKind","ESNext","moduleResolution","ModuleResolutionKind","NodeJs","resolveJsonModule","isolatedModules","jsx","JsxEmit","Preserve","formatDiagnosticHost","getCanonicalFileName","fileName","getCurrentDirectory","sys","getNewLine","os","EOL","log","yellow","writeFile","resolvedTsConfig","resolvedCompilerOptions","config","readTsConfig","readConfigFile","Error","formatDiagnostic","throwAwayConfig","JSON","parse","stringify","result","parseJsonConfigFileContent","dirname","errors","code","options","e","name","info","message","userTsConfigContent","encoding","userTsConfig","CommentJson","messages","option","Object","keys","valueToCheck","undefined","coloredOption","push","exclude","include","warn","forEach","appTypeDeclarations","hasAppTypeDeclarations"],"mappings":"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","sourcesContent":["import { promises as fsPromises } from 'fs'\nimport chalk from 'next/dist/compiled/chalk'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\nimport os from 'os'\nimport path from 'path'\nimport { fileExists } from './file-exists'\nimport { recursiveReadDir } from './recursive-readdir'\nimport { resolveRequest } from './resolve-request'\n\nasync function hasTypeScript(dir: string): Promise<boolean> {\n  const typescriptFiles = await recursiveReadDir(\n    dir,\n    /.*\\.(ts|tsx)$/,\n    /(node_modules|.*\\.d\\.ts)/\n  )\n\n  return typescriptFiles.length > 0\n}\n\nasync function checkDependencies({\n  dir,\n  isYarn,\n}: {\n  dir: string\n  isYarn: boolean\n}): Promise<string> {\n  const requiredPackages = [\n    { file: 'typescript', pkg: 'typescript' },\n    { file: '@types/react/index.d.ts', pkg: '@types/react' },\n    { file: '@types/node/index.d.ts', pkg: '@types/node' },\n  ]\n\n  let resolutions = new Map<string, string>()\n\n  const missingPackages = requiredPackages.filter((p) => {\n    try {\n      resolutions.set(p.pkg, resolveRequest(p.file, `${dir}/`))\n      return false\n    } catch (_) {\n      return true\n    }\n  })\n\n  if (missingPackages.length < 1) {\n    return resolutions.get('typescript')!\n  }\n\n  const packagesHuman = missingPackages\n    .map(\n      (p, index, { length }) =>\n        (index > 0\n          ? index === length - 1\n            ? length > 2\n              ? ', and '\n              : ' and '\n            : ', '\n          : '') + p.pkg\n    )\n    .join('')\n  const packagesCli = missingPackages.map((p) => p.pkg).join(' ')\n\n  console.error(\n    chalk.bold.red(\n      `It looks like you're trying to use TypeScript but do not have the required package(s) installed.`\n    )\n  )\n  console.error()\n  console.error(\n    chalk.bold(`Please install ${chalk.bold(packagesHuman)} by running:`)\n  )\n  console.error()\n  console.error(\n    `\\t${chalk.bold.cyan(\n      (isYarn ? 'yarn add --dev' : 'npm install --save-dev') + ' ' + packagesCli\n    )}`\n  )\n  console.error()\n  console.error(\n    chalk.bold(\n      'If you are not trying to use TypeScript, please remove the ' +\n        chalk.cyan('tsconfig.json') +\n        ' file from your package root (and any TypeScript files).'\n    )\n  )\n  console.error()\n  process.exit(1)\n}\n\nexport async function verifyTypeScriptSetup(\n  dir: string,\n  pagesDir: string\n): Promise<void> {\n  const tsConfigPath = path.join(dir, 'tsconfig.json')\n  const yarnLockFile = path.join(dir, 'yarn.lock')\n\n  const hasTsConfig = await fileExists(tsConfigPath)\n  const isYarn = await fileExists(yarnLockFile)\n\n  let firstTimeSetup = false\n  if (hasTsConfig) {\n    const tsConfig = await fsPromises\n      .readFile(tsConfigPath, 'utf8')\n      .then((val) => val.trim())\n    firstTimeSetup = tsConfig === '' || tsConfig === '{}'\n  } else {\n    const hasTypeScriptFiles = await hasTypeScript(pagesDir)\n    if (hasTypeScriptFiles) {\n      firstTimeSetup = true\n    } else {\n      return\n    }\n  }\n\n  const tsPath = await checkDependencies({ dir, isYarn })\n  const ts = (await import(tsPath)) as typeof import('typescript')\n\n  const compilerOptions: any = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    target: {\n      parsedValue: ts.ScriptTarget.ES5,\n      suggested: 'es5',\n    },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    strict: { suggested: false },\n    forceConsistentCasingInFileNames: { suggested: true },\n    noEmit: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      value: 'esnext',\n      reason: 'for dynamic import() support',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    jsx: { parsedValue: ts.JsxEmit.Preserve, value: 'preserve' },\n  }\n\n  const formatDiagnosticHost = {\n    getCanonicalFileName: (fileName: string) => fileName,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getNewLine: () => os.EOL,\n  }\n\n  if (firstTimeSetup) {\n    console.log(\n      chalk.yellow(\n        `We detected TypeScript in your project and created a ${chalk.bold(\n          'tsconfig.json'\n        )} file for you.`\n      )\n    )\n    console.log()\n\n    await fsPromises.writeFile(tsConfigPath, '{}' + os.EOL)\n  }\n\n  let resolvedTsConfig\n  let resolvedCompilerOptions\n  try {\n    const { config: readTsConfig, error } = ts.readConfigFile(\n      tsConfigPath,\n      ts.sys.readFile\n    )\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost))\n    }\n\n    resolvedTsConfig = readTsConfig\n\n    // Get TS to parse and resolve any \"extends\"\n    // Calling this function also mutates the tsconfig, adding in \"include\" and\n    // \"exclude\", but the compilerOptions remain untouched\n    const throwAwayConfig = JSON.parse(JSON.stringify(readTsConfig))\n    const result = ts.parseJsonConfigFileContent(\n      throwAwayConfig,\n      ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new Error(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticHost)\n      )\n    }\n\n    resolvedCompilerOptions = result.options\n  } catch (e) {\n    if (e && e.name === 'SyntaxError') {\n      console.error(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') + '.',\n          'Please make sure it contains syntactically correct JSON.'\n        )\n      )\n    }\n\n    console.info(e?.message ? `${e.message}` : '')\n    process.exit(1)\n    return\n  }\n\n  const userTsConfigContent = await fsPromises.readFile(tsConfigPath, {\n    encoding: 'utf8',\n  })\n  const userTsConfig = CommentJson.parse(userTsConfigContent)\n  if (userTsConfig.compilerOptions == null) {\n    userTsConfig.compilerOptions = {}\n    firstTimeSetup = true\n  }\n\n  const messages = []\n  for (const option of Object.keys(compilerOptions)) {\n    const { parsedValue, value, suggested, reason } = compilerOptions[option]\n\n    const valueToCheck = parsedValue === undefined ? value : parsedValue\n    const coloredOption = chalk.cyan('compilerOptions.' + option)\n\n    if (suggested != null) {\n      if (resolvedCompilerOptions[option] === undefined) {\n        userTsConfig.compilerOptions[option] = suggested\n        messages.push(\n          `${coloredOption} to be ${chalk.bold(\n            'suggested'\n          )} value: ${chalk.cyan.bold(suggested)} (this can be changed)`\n        )\n      }\n    } else if (resolvedCompilerOptions[option] !== valueToCheck) {\n      userTsConfig.compilerOptions[option] = value\n      messages.push(\n        `${coloredOption} ${chalk.bold(\n          valueToCheck == null ? 'must not' : 'must'\n        )} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` +\n          (reason != null ? ` (${reason})` : '')\n      )\n    }\n  }\n\n  // tsconfig will have the merged \"include\" and \"exclude\" by this point\n  if (resolvedTsConfig.exclude == null) {\n    userTsConfig.exclude = ['node_modules']\n  }\n\n  if (resolvedTsConfig.include == null) {\n    userTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx']\n  }\n\n  if (messages.length > 0) {\n    if (firstTimeSetup) {\n      console.info(\n        chalk.bold(\n          'Your',\n          chalk.cyan('tsconfig.json'),\n          'has been populated with default values.'\n        )\n      )\n      console.info()\n    } else {\n      console.warn(\n        chalk.bold(\n          'The following changes are being made to your',\n          chalk.cyan('tsconfig.json'),\n          'file:'\n        )\n      )\n      messages.forEach((message) => {\n        console.warn('  - ' + message)\n      })\n      console.warn()\n    }\n    await fsPromises.writeFile(\n      tsConfigPath,\n      CommentJson.stringify(userTsConfig, null, 2) + os.EOL\n    )\n  }\n\n  // Reference `next` types\n  const appTypeDeclarations = path.join(dir, 'next-env.d.ts')\n  const hasAppTypeDeclarations = await fileExists(appTypeDeclarations)\n  if (!hasAppTypeDeclarations) {\n    await fsPromises.writeFile(\n      appTypeDeclarations,\n      '/// <reference types=\"next\" />' +\n        os.EOL +\n        '/// <reference types=\"next/types/global\" />' +\n        os.EOL\n    )\n  }\n}\n"]}